import networkx as nx
import random
import time
import matplotlib.pyplot as plt
import dependency_knapsack_solvers as dks

AVERAGE_RUN = 25
BLOCK_SIZE = 50000
########################################################################
def create_random_graph(num_of_nodes, with_edges):
    G = nx.DiGraph()
    for i in range(num_of_nodes):
        G.add_node(i,size=random.randint(1,100),fee=random.randint(1,100))
    if with_edges:
        number_of_edges = random.randint(1,num_of_nodes)
        for i in range(number_of_edges):
            first = random.randint(0,num_of_nodes-1)
            second = random.randint(0,num_of_nodes-1)
            anc = nx.ancestors(G, first)
            if second in anc:
                continue
            G.add_edge(first,second)
    return G
########################################################################
def add_nodes_random(G, num_of_nodes, with_edges):
    G2 = G
    j = len(G.nodes())
    for i in range(num_of_nodes):
        G2.add_node(i + j, size=random.randint(1, 100), fee=random.randint(1, 100))
    if with_edges:
        number_of_edges = random.randint(1, num_of_nodes)
        for i in range(number_of_edges):
            first = random.randint(0, len(G.nodes()) -1)
            second = random.randint(j, j + num_of_nodes -1)
            anc = nx.ancestors(G, first)
            if second in anc:
                continue
            G2.add_edge(first, second)
    return G2
########################################################################
def check_if_only_added(G1, G2):
    elements1 = set([x[0] for x in G1.nodes.data()])
    elements2 = set([x[0] for x in G2.nodes.data()])
    if (len(elements1.difference(elements2)) == 0):
        return True
    return False
########################################################################
def mock_data():
    nodes = []
    reg_time = []
    reg_sol_list = []
    inc_time = []
    inc_sol_list = []




    for i in range(1,300,10):
        print(i)
        nodes.append(i)

        reg_sum = 0
        reg_sol = 0
        inc_sum = 0
        inc_sol = 0

        G = create_random_graph(100, True)
        last_sol = dks.get_set_greedy2(G, BLOCK_SIZE)

        for j in range(AVERAGE_RUN):
            G2 = add_nodes_random(G, i, True)

            if not check_if_only_added(G, G2):
                print("not increment")

            start = time.time()
            reg_sol += dks.get_fee_greedy2(G2, BLOCK_SIZE)
            end = time.time()
            reg_sum += end - start

            start = time.time()
            inc_sol += dks.get_fee_greedy_inc(G2, BLOCK_SIZE, last_sol)
            end = time.time()
            inc_sum += end - start



        reg_time.append(reg_sum/AVERAGE_RUN)
        reg_sol_list.append(reg_sol/AVERAGE_RUN)
        inc_time.append(inc_sum/AVERAGE_RUN)
        inc_sol_list.append(inc_sol/AVERAGE_RUN)

    print("nodes = " + str(nodes))
    print("reg_time = " + str(reg_time))
    print("reg_sol_ = " + str(reg_sol_list))
    print("inc_time = " + str(inc_time))
    print("inc_sol = " + str(inc_sol_list))




#########################################################################
# #DATA CREATED FROM PREVIOUS FUNCTION - FIGURES 24-25
# nodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
# reg_time = [0.012552261352539062, 0.014191207885742187, 0.033220319747924804, 0.020428047180175782, 0.02906177520751953, 0.04940937995910644, 0.05006937026977539, 0.051549005508422854, 0.04021426200866699, 0.052607250213623044, 0.06955665588378906, 0.05286362648010254, 0.06292057037353516, 0.07675169944763184, 0.0757126522064209, 0.07647250175476074, 0.1094126796722412, 0.08934455871582031, 0.10105741500854493, 0.137929048538208, 0.1146121597290039, 0.11816676139831543, 0.130479097366333, 0.14063271522521972, 0.14710889816284178, 0.16038084030151367, 0.160021333694458, 0.17673079490661622, 0.17884922981262208, 0.20970760345458983]
# reg_sol_ = [5845.28, 6618.44, 6884.88, 7642.6, 8564.96, 8615.96, 9942.2, 10074.24, 10141.88, 11583.04, 11763.84, 14037.68, 13402.04, 13763.28, 15524.8, 15869.56, 15986.44, 17161.96, 17739.52, 18090.04, 19095.48, 18784.72, 20070.68, 20519.68, 22831.72, 21959.04, 21806.4, 23774.52, 23783.4, 23624.08]
# inc_time = [0.016469640731811522, 0.016469783782958984, 0.03514092445373535, 0.025463619232177735, 0.03465876579284668, 0.05504573822021484, 0.05876401901245117, 0.053686542510986326, 0.046971158981323244, 0.0598035717010498, 0.07195708274841309, 0.05684540748596192, 0.07655319213867187, 0.09038436889648438, 0.07879160881042481, 0.09146357536315917, 0.11069118499755859, 0.10493531227111816, 0.11216252326965331, 0.15655698776245117, 0.12179390907287597, 0.12820068359375, 0.14423032760620116, 0.15010769844055175, 0.15238580703735352, 0.16777633666992187, 0.1767301845550537, 0.1885633087158203, 0.20551365852355957, 0.22322251319885253]
# inc_sol = [5845.28, 6618.44, 6884.88, 7642.6, 8564.96, 8615.96, 9942.2, 10074.24, 10141.88, 11583.04, 11763.84, 14037.68, 13402.04, 13763.28, 15524.8, 15869.56, 15986.44, 17161.96, 17739.52, 18090.04, 19095.48, 18784.72, 20070.68, 20519.68, 22831.72, 21959.04, 21806.4, 23774.52, 23783.4, 23624.08]
# #########################################################################

# #########################################################################
# DATA CREATED FROM PREVIOUS FUNCTION - FIGURE 26
nodes = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 201, 211, 221, 231, 241, 251, 261, 271, 281, 291]
reg_time = [0.009793968200683593, 0.0418942928314209, 0.09722040176391601, 0.17569126129150392, 0.265835132598877, 0.3456257343292236, 0.444604377746582, 0.5126824474334717, 0.6115415954589843, 0.7235916519165039, 0.8180136680603027, 0.9416975784301758, 1.0631817626953124, 1.1320993900299072, 1.1805493450164795, 1.3146267127990723, 1.4363110446929932, 1.568988971710205, 1.7216541576385498, 1.9705401706695556, 2.0628028678894044, 2.1764528465271, 2.1930023002624512, 2.411347599029541, 2.519880313873291, 2.8226132011413574, 2.7661679935455323, 3.006738567352295, 3.3251420879364013, 3.399975271224976]
reg_sol_ = [6022.2, 12115.48, 18941.36, 25266.92, 31910.56, 38477.88, 42685.8, 48194.4, 50881.32, 55765.92, 58227.72, 62186.08, 65000.96, 66653.0, 67911.72, 70013.72, 71064.56, 74554.92, 76977.6, 81007.84, 82536.28, 83092.52, 83095.68, 86311.6, 87256.2, 91828.96, 89898.0, 92850.08, 95418.76, 95554.72]
inc_time = [0.012272405624389648, 0.0460513973236084, 0.10589391708374024, 0.18780362129211425, 0.2829451274871826, 0.36629366874694824, 0.4680707359313965, 0.5414651012420655, 0.6332478904724121, 0.7692042064666748, 0.838880672454834, 0.9887075233459472, 1.0941627597808838, 1.1749126815795898, 1.2402722454071045, 1.367353343963623, 1.4884786987304688, 1.6193176746368407, 1.77126389503479, 2.004199733734131, 2.104217987060547, 2.2443309593200684, 2.2379751682281492, 2.4971743774414064, 2.6141021060943603, 2.887572603225708, 2.85907039642334, 3.0928063201904297, 3.4240806674957276, 3.4975556564331054]
inc_sol = [6022.2, 12115.48, 18941.36, 25266.92, 31917.48, 38509.44, 42758.56, 48391.2, 50988.24, 55951.24, 58577.64, 62372.16, 65353.64, 67206.72, 68443.56, 70626.96, 71759.12, 74944.96, 77679.84, 81468.28, 82872.72, 83808.84, 83949.64, 86985.16, 87870.2, 92114.6, 90840.2, 93633.8, 96373.32, 96407.68]

def plot1():
    plt.plot(nodes, reg_sol_, 'bo', label="Non-Incremental")
    plt.plot(nodes, inc_sol, 'r*', label = "Incremental")
    plt.xlabel("Number of transactions added")
    plt.ylabel("Solution value")
    plt.legend(loc = 'upper left')
    plt.show()
########################################################################
def plot2():
    plt.plot(nodes, reg_time, 'bo', label="Non-Incremental")
    plt.plot(nodes, inc_time, 'r*', label="Incremental")
    plt.xlabel("Number of transactions added")
    plt.ylabel("Running time in seconds")
    plt.legend(loc='upper left')
    plt.show()
########################################################################